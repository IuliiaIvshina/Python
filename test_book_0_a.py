
# распознавание букв
import numpy as np

w0 = np.zeros((16)) # инициализация весов
# исходные данные
D0 = np.array([
    [0,1,1,0,
     1,0,0,1,
     1,0,0,1,
     0,1,1,0],
    [1,1,1,1,
     1,0,0,1,
     1,0,0,1,
     1,1,1,1],
    [0,1,1,0,
     1,0,0,1,
     1,1,1,1,
     1,0,0,1],
    [0,1,1,0,
     1,1,1,1,
     1,0,0,1,
     1,0,0,1],
    [0,1,1,0,
     1,0,1,1,
     1,1,0,1,
     0,1,1,0],
]) 
# выходной вектор
Y0 = np.array([1,1,0,0])

w1 = np.zeros((16)) # инициализация весов
# исходные данные
D1 = np.array([
    [0,1,1,0,
     1,0,0,1,
     1,0,0,1,
     0,1,1,0],
    [1,1,1,1,
     1,0,0,1,
     1,0,0,1,
     1,1,1,1],
    [0,1,1,0,
     1,0,0,1,
     1,1,1,1,
     1,0,0,1],
    [0,1,1,0,
     1,1,1,1,
     1,0,0,1,
     1,0,0,1],
    [0,1,1,0,
     1,0,1,1,
     1,1,0,1,
     0,1,1,0],
]) 
# выходной вектор
Y1 = np.array([0,0,1,1])

a = 0.2 # темп  обучения
b = -0.4 # торможение (смещение)

# активационная функция
sigm = lambda x: 1 if x > 0 else 0

# тело нейрона
def f0(x):
    s = b + np.sum(x @ w0)
    return sigm(s)

# тело нейрона
def f1(x):
    s = b + np.sum(x @ w1)
    return sigm(s)

# эпоха обучения
def train0():
    global w0
    _w = w0.copy()
    for x, y in zip(D0, Y0):
        w0 += a * (y - f0(x)) * x
    return (w0 != _w).any()  

def train1():
    global w1
    _w = w1.copy()
    for x, y in zip(D1, Y1):
        w1 += a * (y - f1(x)) * x
    return (w1 != _w).any()  

# обучение и тестирование
while train0() and train1():
    print(w0,w1) 

for x in D0:
    print(x, f0(x), f1(x))

